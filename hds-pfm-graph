#!/usr/bin/perl -w
#
# $Id$
#

=pod

=head1 hds-pfm-graph

Script to parse Hitachi DF600 (Thunder series, 95xx) and DF700
(AMS/WMS series) storage arrays performance data (collected with
Storage Navigator Modular auperform CLI command or Performance tool in
GUI) and create a nice graphs of the data.

Requires rrdtool and Date::Manip perl module.

Example statistics collection command:
  auperform -unit ams500-a -pfmstatis -auto 1 -count 120 -cat

DF600 arrays output LU, RG and HDU information for nonexistent LU's,
RG's and HDU's. You may want to limit maximum LU, RG and HDU unit
number with -L, -R and -U options. Or better use "-Q <array_name>"
option to query array for existing objects using SNM-CLI commands.

=cut

use strict;

use RRDs;
use Date::Manip;
use Getopt::Std;

use vars qw($me $header_match $header $subsys $sample @samples $struct);
use vars qw(@colors $step_time $start_time $end_time);
use vars qw(%opts %options $timezone $numsamples %array);

sub usage {
	print <<_EOT_;
$me - Parse Hitachi DF600/DF700 statistics, collected with
Storage Navigator Modular (auperform CLI command or Performance tool in GUI),
and create graphs.
usage: $me [-o outdir] [-s start_time|start_sample_num]
       @{[' ' x length $me]} [-e end_time|end_sample_num]
       @{[' ' x length $me]} [-L MaxLU] [-R MaxRG] [-U MaxHDU]
       @{[' ' x length $me]} [-Q array_name] [-q] pfm*.txt
_EOT_
	exit 1
}

$options{outdir} = 'out';
# Width and height of the graph canvas
$options{graph_width} = 1000;
$options{graph_height} = 240;
$options{index_html} = 'index.html';
$options{verbose} = 1;

# Date::Manip -- Set Asia/Novosibirsk time zone
$timezone = 'F-6G';

$header_match = [
	{
		subsys => 'Port',
		key => [ 'CTL', 'Port' ],
		re => qr/^CTL\s+Port\s+IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'Port',
			'IO Rate(IOPS)',
			'Read Rate(IOPS)',
			'Write Rate(IOPS)',
			'Read Hit(%)',
			'Write Hit(%)',
			'Trans. Rate(MB/S)',
			'Read Trans. Rate(MB/S)',
			'Write Trans. Rate(MB/S)',
		],
	}, {
		subsys => 'Port',
		key => [ 'CTL', 'Port' ],
		re => qr/^CTL\s+Port\s+Read CMD Count/,
		cap => [
			'CTL',
			'Port',
			'Read CMD Count',
			'Write CMD Count',
			'Read CMD Hit Count',
			'Write CMD Hit Count',
			'Read Trans. Size(MB)',
			'Write Trans. Size(MB)',
		],
	}, {
		subsys => 'Port',
		key => [ 'CTL', 'Port' ],
		re => qr/^CTL\s+Port\s+CTL CMD IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'Port',
			'CTL CMD IO Rate(IOPS)',
			'CTL CMD Trans. Rate(KB/S)',
			'CTL CMD Count',
			'CTL CMD Trans. Size(KB)',
			'CTL CMD Time(microsec.)',
			'CTL CMD Max Time(microsec.)',
		],
	}, {
		subsys => 'Port',
		key => [ 'CTL', 'Port' ],
		re => qr/^CTL\s+Port\s+Data CMD IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'Port',
			'Data CMD IO Rate(IOPS)',
			'Data CMD Trans. Rate(MB/S)',
			'Data CMD Count',
			'Data CMD Trans. Size(MB)',
			'Data CMD Time(microsec.)',
			'Data CMD Max Time(microsec.)',
		],
	}, {
		subsys => 'Port',
		key => [ 'CTL', 'Port' ],
		re => qr/^CTL\s+Port\s+Timeout Error Count/,
		cap => [
			'CTL',
			'Port',
			'Timeout Error Count',
		],
	}, {
		subsys => 'RG',
		key => [ 'CTL', 'RG' ],
		re => qr/^CTL\s+RG\s+IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'RG',
			'IO Rate(IOPS)',
			'Read Rate(IOPS)',
			'Write Rate(IOPS)',
			'Read Hit(%)',
			'Write Hit(%)',
			'Trans. Rate(MB/S)',
			'Read Trans. Rate(MB/S)',
			'Write Trans. Rate(MB/S)',
		],
	}, {	
		subsys => 'RG',
		key => [ 'CTL', 'RG' ],
		re => qr/^CTL\s+RG\s+Read CMD Count/,
		cap => [
			'CTL',
			'RG',
			'Read CMD Count',
			'Write CMD Count',
			'Read CMD Hit Count',
			'Write CMD Hit Count',
			'Read Trans. Size(MB)',
			'Write Trans. Size(MB)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'LU',
			'IO Rate(IOPS)',
			'Read Rate(IOPS)',
			'Write Rate(IOPS)',
			'Read Hit(%)',
			'Write Hit(%)',
			'Trans. Rate(MB/S)',
			'Read Trans. Rate(MB/S)',
			'Write Trans. Rate(MB/S)',
		],
	}, {	
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Read CMD Count/,
		cap => [
			'CTL',
			'LU',
			'Read CMD Count',
			'Write CMD Count',
			'Read CMD Hit Count',
			'Write CMD Hit Count',
			'Read Trans. Size(MB)',
			'Write Trans. Size(MB)',
		],
	}, {	
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Read CMD Hit Count2/,
		cap => [
			'CTL',
			'LU',
			'Read CMD Hit Count2',
			'Read CMD Hit Time(microsec.)',
			'Read CMD Hit Max Time(microsec.)',
		],
	}, {	
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Write CMD Hit Count2/,
		cap => [
			'CTL',
			'LU',
			'Write CMD Hit Count2',
			'Write CMD Hit Time(microsec.)',
			'Write CMD Hit Max Time(microsec.)',
		],
	}, {	
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Read CMD Miss Count/,
		cap => [
			'CTL',
			'LU',
			'Read CMD Miss Count',
			'Read CMD Miss Time(microsec.)',
			'Read CMD Miss Max Time(microsec.)',
		],
	}, {	
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Write CMD Miss Count/,
		cap => [
			'CTL',
			'LU',
			'Write CMD Miss Count',
			'Write CMD Miss Time(microsec.)',
			'Write CMD Miss Max Time(microsec.)',
		],
	}, {	
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Read CMD Job Count/,
		cap => [
			'CTL',
			'LU',
			'Read CMD Job Count',
			'Read CMD Job Time(microsec.)',
			'Read CMD Job Max Time(microsec.)',
		],
	}, {	
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Write CMD Job Count/,
		cap => [
			'CTL',
			'LU',
			'Write CMD Job Count',
			'Write CMD Job Time(microsec.)',
			'Write CMD Job Max Time(microsec.)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Read Hit Delay CMD Count/,
		cap => [
			'CTL',
			'LU',
			'Read Hit Delay CMD Count(<300ms)',
			'Read Hit Delay CMD Count(300-499ms)',
			'Read Hit Delay CMD Count(500-999ms)',
			'Read Hit Delay CMD Count(1000ms-)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Write Hit Delay CMD Count/,
		cap => [
			'CTL',
			'LU',
			'Write Hit Delay CMD Count(<300ms)',
			'Write Hit Delay CMD Count(300-499ms)',
			'Write Hit Delay CMD Count(500-999ms)',
			'Write Hit Delay CMD Count(1000ms-)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Read Miss Delay CMD Count/,
		cap => [
			'CTL',
			'LU',
			'Read Miss Delay CMD Count(<300ms)',
			'Read Miss Delay CMD Count(300-499ms)',
			'Read Miss Delay CMD Count(500-999ms)',
			'Read Miss Delay CMD Count(1000ms-)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Write Miss Delay CMD Count/,
		cap => [
			'CTL',
			'LU',
			'Write Miss Delay CMD Count(<300ms)',
			'Write Miss Delay CMD Count(300-499ms)',
			'Write Miss Delay CMD Count(500-999ms)',
			'Write Miss Delay CMD Count(1000ms-)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Read Job Delay CMD Count/,
		cap => [
			'CTL',
			'LU',
			'Read Job Delay CMD Count(<300ms)',
			'Read Job Delay CMD Count(300-499ms)',
			'Read Job Delay CMD Count(500-999ms)',
			'Read Job Delay CMD Count(1000ms-)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Write Job Delay CMD Count/,
		cap => [
			'CTL',
			'LU',
			'Write Job Delay CMD Count(<300ms)',
			'Write Job Delay CMD Count(300-499ms)',
			'Write Job Delay CMD Count(500-999ms)',
			'Write Job Delay CMD Count(1000ms-)',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Tag Count/,
		cap => [
			'CTL',
			'LU',
			'Tag Count',
		],
	}, {
		subsys => 'LU',
		key => [ 'CTL', 'LU' ],
		re => qr/^CTL\s+LU\s+Data CMD IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'LU',
			'Data CMD IO Rate(IOPS)',
			'Data CMD Trans. Rate(MB/S)',
			'Data CMD Count',
			'Data CMD Trans. Size(MB)',
			'Data CMD Time(microsec.)',
			'Data CMD Max Time(microsec.)',
		],
	}, {
		subsys => 'Cache',
		key => [ 'CTL' ],
		re => qr/^CTL\s+Write Pending Rate/,
		cap => [
			'CTL',
			'Write Pending Rate(%)',
		],
	}, {
		subsys => 'Cache',
		key => [ 'CTL' ],
		re => qr/^CTL\s+Clean Queue Usage Rate/,
		cap => [
			'CTL',
			'Clean Queue Usage Rate(%)',
			'Middle Queue Usage Rate(%)',
			'Physical Queue Usage Rate(%)',
			'Total Queue Usage Rate(%)',
		],
	}, {
		subsys => 'Cache',
		key => [ 'CTL', 'Partition' ],
		re => qr/^CTL\s+Partition\s+Write Pending Rate/,
		cap => [
			'CTL',
			'Partition',
			'Write Pending Rate(%)',
		],
	}, {
		subsys => 'Cache',
		key => [ 'CTL', 'Partition' ],
		re => qr/^CTL\s+Partition\s+Clean Queue Usage Rate/,
		cap => [
			'CTL',
			'Partition',
			'Clean Queue Usage Rate(%)',
			'Middle Queue Usage Rate(%)',
			'Physical Queue Usage Rate(%)',
		],
	}, {
		# DF700 processor info
		subsys => 'Processor',
		key => [ 'CTL' ],
		re => qr/^CTL\s+Usage\(\%\)$/,
		cap => [
			'CTL',
			'Usage(%)',
		],
	}, {
		# DF600 processor info
		subsys => 'Processor',
		key => [ 'CTL' ],
		re => qr/^CTL\s+Usage\(\%\)\s+Host I\/O Stop Time/,
		cap => [
			'CTL',
			'Usage(%)',
			'Host I/O Stop Time(microsec.)',
		],
	}, {
		subsys => 'Processor',
		key => [ 'CTL' ],
		re => qr/^CTL\s+Host-Cache Bus Usage Rate/,
		cap => [
			'CTL',
			'Host-Cache Bus Usage Rate(%)',
			'Drive-Cache Bus Usage Rate(%)',
			'Processor-Cache Bus Usage Rate(%)',
		],
	}, {
		subsys => 'Processor',
		key => [ 'CTL' ],
		re => qr/^CTL\s+Cache\(DRR\) Bus Usage Rate/,
		cap => [
			'CTL',
			'Cache(DRR) Bus Usage Rate(%)',
			'Dual Bus Usage Rate(%)',
			'Total Bus Usage Rate(%)',
		],
	}, {
		subsys => 'Drive',
		key => [ 'CTL', 'Unit', 'HDU' ],
		re => qr/^CTL\s+Unit\s+HDU\s+IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'Unit',
			'HDU',
			'IO Rate(IOPS)',
			'Read Rate(IOPS)',
			'Write Rate(IOPS)',
			'Trans. Rate(MB/S)',
			'Read Trans. Rate(MB/S)',
			'Write Trans. Rate(MB/S)',
			'Online Verify Rate(IOPS)',
		],
	}, {
		subsys => 'Drive',
		key => [ 'CTL', 'Unit', 'HDU' ],
		re => qr/^CTL\s+Unit\s+HDU\s+Read CMD Count/,
		cap => [
			'CTL',
			'Unit',
			'HDU',
			'Read CMD Count',
			'Write CMD Count',
			'Read Trans. Size',
			'Write Trans. Size',
			'Online Verify CMD Count',
		],
	}, {
		subsys => 'Drive Operate',
		key => [ 'CTL', 'Unit', 'HDU' ],
		re => qr/^CTL\s+Unit\s+HDU\s+Operating Rate/,
		cap => [
			'CTL',
			'Unit',
			'HDU',
			'Operating Rate(%)',
			'Tag Count',
			'Unload Time(min.)',
		],
	}, {
		subsys => 'Backend',
		key => [ 'CTL', 'Path', 'Loop' ],
		re => qr/^CTL\s+Path\s+Loop\s+IO Rate\(IOPS\)/,
		cap => [
			'CTL',
			'Path',
			'Loop',
			'IO Rate(IOPS)',
			'Read Rate(IOPS)',
			'Write Rate(IOPS)',
			'Trans. Rate(MB/S)',
			'Read Trans. Rate(MB/S)',
			'Write Trans. Rate(MB/S)',
			'Online Verify Rate(IOPS)',
		],
	}, {
		subsys => 'Backend',
		key => [ 'CTL', 'Path', 'Loop' ],
		re => qr/^CTL\s+Path\s+Loop\s+Read CMD Count/,
		cap => [
			'CTL',
			'Path',
			'Loop',
			'Read CMD Count',
			'Write CMD Count',
			'Read Trans. Size',
			'Write Trans. Size',
			'Online Verify CMD Count',
		],
	},
];

# Colors from Orca
@colors = (
	'00ff00',	# Green
	'0000ff',	# Blue
	'ff0000',	# Red
	'a020f0',	# Magenta
	'ffa500',	# Orange
	'a52a2a',	# Brown
	'00ffff',	# Cyan
	'00aa00',	# Dark Green
	'eeee00',	# Yellow
	'707070',	# Dark Gray
	'be711d',	# Rust 11
	'dad1ff',	# Lilas
	'7df5cb',	# Biz green
	'ff81a9',	# Pink
	'ffe114',	# Golden
	'96a125',	# Olive
	'ffd8ae',	# Peaches
	'bebebe',	# Light Grey
	'ebeec3',	# Taupe
	'860033',	# Bourgogne
	'19a48a',	# Ocean green
	'b8a390',	# VLB
	'a3c5a6',	# Blackboard green
	'ffd2b2',	# Light orange
	'000000',	# Black
	'fff8bd',	# Post-it (tm) Yellow
	'c7eaff',	# Ice blue
	'd3ff52',	# Gatorade green
);

sub vmsg {
	print STDERR "@_"
		if $options{verbose};
}

# Set time zone for Date::Manip
Date_Init("TZ=$timezone");

($me = $0) =~ s!.*/!!;
getopts 'o:s:e:L:R:U:Q:hq', \%opts;
&usage
	if $opts{h};
&usage
	unless @ARGV;
$options{outdir} = $opts{o} if $opts{o};
if ($opts{s}) {
	if ($opts{s} =~ /^#?(\d+)$/) {
		$options{start_sample} = $1;
	} else {
		unless ($options{start_time} = ParseDate $opts{s}) {
			die "Invalid time specification: $opts{s}\n";
		}
	}
}
if ($opts{e}) {
	if ($opts{e} =~ /^#?(\d+)$/) {
		$options{end_sample} = $opts{e};
	} else {
		unless ($options{end_time} = ParseDate $opts{e}) {
			die "Invalid time specification: $opts{e}\n";
		}
	}
}
$options{maxlu} = $opts{L}
	if $opts{L};
$options{maxrg} = $opts{R}
	if $opts{R};
$options{maxunit} = $opts{U}
	if $opts{U};
$options{query_array} = $opts{Q}
	if $opts{Q};
$options{verbose} = ''
	if $opts{q};

sub update_struct {
	my $tree = shift;
	while (my $key = shift) {
		my $leaf;

		$leaf = $tree->{names}{$key};
		unless ($leaf) {
			$leaf = { name => $key, data => [], names => {} };
			push @{$tree->{data}}, $leaf;
			$tree->{names}{$key} = $leaf;
		}
		$tree = $leaf;
	}
}

if ($options{query_array}) {
	vmsg "Quering array $options{query_array}";
	my ($num_drives, $num_units, $num_rgs, $num_lus) = (0, 0, 0, 0);

	open LU, "auluref -unit $options{query_array} |"
		or die "Can't spawn auluref: $!";
	while (<LU>) {
		s/^\s*|\s*$//g;
		my $lu = (split /\s+/)[0];
		unless ($lu =~ /\D/) {
			$array{lu}{$lu} = 1;
			$num_lus++;
		}
	}
	close LU;

	open RG, "aurgref -unit $options{query_array} |"
		or die "Can't spawn aurgref: $!";
	while (<RG>) {
		s/^\s*|\s*$//g;
		my $rg = (split /\s+/)[0];
		unless ($rg =~ /\D/) {
			$array{rg}{$rg} = 1;
			$num_rgs++;
		}
	}
	close RG;

	open DR, "audrive -unit $options{query_array} -status |"
		or die "Can't spawn audrive: $!";
	while (<DR>) {
		s/^\s*|\s*$//g;
		my ($unit, $hdu) = split /\s+/;
		unless ($unit =~ /\D/ or $hdu =~ /\D/) {
			$array{drive}{$unit}{$hdu} = 1;
			$num_drives++;
		}
	}
	$num_units = scalar keys %{$array{drive}};
	close DR;

	vmsg "\nArray $options{query_array}: $num_units HDUs,",
		"max HDU: @{[ (sort { $a <=> $b } keys %{$array{drive}})[-1] ]}\n";
	vmsg "Array $options{query_array}: $num_drives drives\n";
	vmsg "Array $options{query_array}: $num_rgs RGs,",
		"max RG: @{[ (sort { $a <=> $b } keys %{$array{rg}})[-1] ]}\n";
	vmsg "Array $options{query_array}: $num_lus LUs,",
		"max LU: @{[ (sort { $a <=> $b } keys %{$array{lu}})[-1] ]}\n";
}

$struct = {};
FILE: for my $file (@ARGV) {
	open IN, $file
		or die "can't open $file: $!";
	LINE: while (<IN>) {
		chomp;
		next
			unless /\S/;
		if (/^No\.\s*(\d+)$/) {
			$sample = {};
			push @samples, $sample;
			$subsys = '';
			undef $header;
			$sample->{num} = $1;
			vmsg "\rParsing sample # $sample->{num}";
		} elsif (m!^(\d+/\d+/\d+\s+\d+:\d+:\d+)\s+-\s+(\d+/\d+/\d+\s+\d+:\d+:\d+)$!) {
			$sample->{start} = ParseDate $1;
			$sample->{end} = ParseDate $2;
		} elsif (/^----\s+([\w\s]+?)(\s+Information)?\s+----$/) {
			$subsys = $1;
		} elsif (/^CTL/) {	# Header
			undef $header;
			for my $hm (@{$header_match}) {
				if (/$hm->{re}/ and $subsys eq $hm->{subsys}) {
					$header = $hm;
					last;
				}
			}
			warn "$me: warning: unknown header in $file/$subsys: $_"
				unless $header;
		} else {	# Data line
			next
				unless defined $header;

			s/^\s*|\s*$//g;
			my @values = split /\s+/;

			if ($options{query_array}) {

				# Filter LU's
				if (@{$header->{key}} == 2
					and $header->{key}[0] eq 'CTL'
					and $header->{key}[1] eq 'LU'
					and not $array{lu}{$values[1]})
				{
					next;
				}

				# Filter RG's
				if (@{$header->{key}} == 2
					and $header->{key}[0] eq 'CTL'
					and $header->{key}[1] eq 'RG'
					and not $array{rg}{$values[1]})
				{
					next;
				}

				# Filter drives
				if (@{$header->{key}} == 3
					and $header->{key}[0] eq 'CTL'
					and $header->{key}[1] eq 'Unit'
					and $header->{key}[2] eq 'HDU'
					and not $array{drive}{$values[1]}{$values[2]})
				{
					next;
				}
			} else {

				# Limit maximum LU number for DF600
				if ($options{maxlu}
					and @{$header->{key}} == 2
					and $header->{key}[0] eq 'CTL'
					and $header->{key}[1] eq 'LU'
					and $values[1] > $options{maxlu})
				{
					next;
				}

				# Limit maximum RG number for DF600
				if ($options{maxrg}
					and @{$header->{key}} == 2
					and $header->{key}[0] eq 'CTL'
					and $header->{key}[1] eq 'RG'
					and $values[1] > $options{maxrg})
				{
					next;
				}

				# Limit maximum Array Unit number for DF600
				if ($options{maxunit}
					and @{$header->{key}} == 3
					and $header->{key}[0] eq 'CTL'
					and $header->{key}[1] eq 'Unit'
					and $header->{key}[2] eq 'HDU'
					and $values[1] > $options{maxunit})
				{
					next;
				}
			}

			my @cap = @{$header->{cap}};
			unless (@{$header->{cap}} == @values) {
				warn "$me: warning: unmatched number of values in "
					. "$file/$subsys - @{[ join '-', @{$header->{cap}} ]}";
			}
			my %values = map { (shift @cap) => $_ } @values;

			my ($key, $cap);

			my $nodetype = '';
			my $node = '';
			for $key (@{$header->{key}}) {
				$nodetype .= ", "
					if $nodetype;
				$nodetype .= $key;

				$node .= ", "
					if $node;
				$node .= "$key=$values{$key}";
			}

			CAP: for $cap (keys %values) {
				for $key (@{$header->{key}}) {
					next CAP
						if $cap eq $key;
				}

				$sample->{data}{$subsys}{$nodetype}{$cap}{$node} = $values{$cap};
				&update_struct($struct, $subsys, $nodetype, $cap, $node);
			}
		}
	}
}

vmsg "\nSorting samples";

# Sort samples by start time
@samples = sort { Date_Cmp($a->{start}, $b->{start}) } @samples;
if (defined $options{end_time}) {
	@samples = grep { Date_Cmp($options{end_time}, $_->{end}) >= 0 }
		@samples;
} elsif (defined $options{end_sample}) {
	splice @samples, $options{end_sample};
}
if (defined $options{start_time}) {
	@samples = grep { Date_Cmp($options{start_time}, $_->{start}) <= 0 }
		@samples;
} elsif (defined $options{start_sample}) {
	splice @samples, 0, $options{start_sample} - 1;
}
$numsamples = @samples;
$start_time = UnixDate($samples[0]->{start}, "%s");
$end_time = UnixDate($samples[-1]->{end}, "%s");
# Calculate average sample duration
my $sum_time = 0;
for $sample (@samples) {
	$sum_time += UnixDate($sample->{end}, "%s")
		- UnixDate($sample->{start}, "%s");
}
my $average_sample_time = int($sum_time / @samples + .5);
# Calculate step time
$sum_time = 0;
my $valid_samples = 0;
for my $ii (0 .. $#samples - 1) {
	my $interval = UnixDate($samples[$ii + 1]->{end}, "%s")
		- UnixDate($samples[$ii]->{end}, "%s");
	if ($interval <= 2 * $average_sample_time) {
		$sum_time += $interval;
		$valid_samples++;
	}
}
$step_time = int($sum_time / $valid_samples + .5);

vmsg "\nSorting structure";
for $subsys (@{$struct->{data}}) {
	for my $nodetype (@{$subsys->{data}}) {
		@{$nodetype->{data}} = sort {
			(my $a1 = $a->{name}) =~ s/^(\S+)\s+(.*?)$/$2$1/;
			(my $b1 = $b->{name}) =~ s/^(\S+)\s+(.*?)$/$2$1/;
			$a1 cmp $b1;
		} @{$nodetype->{data}};
	}
}

-d $options{outdir}
	or mkdir $options{outdir}
		or die "can't create directory $options{outdir}: $!";

my %html_index;
my $html_images = '';
my $graph_comment =
	UnixDate($samples[0]->{start}, "%Y-%m-%d %H\\:%M\\:%S") . " - "
	. UnixDate($samples[-1]->{end}, "%Y-%m-%d %H\\:%M\\:%S");
my $dsnum = 0;
for $subsys (@{$struct->{data}}) {
	my $html_subsys_name = "subsys-$subsys->{name}";
	$html_subsys_name =~ s/\s/_/g;
	$html_subsys_name =~ s/([^\w_\-])/sprintf "x%02x", ord $1/ge;

	$html_images .= "<hr>\n";

	for my $nodetype (@{$subsys->{data}}) {
		for my $cap (@{$nodetype->{data}}) {
			my (@nodes, $node, $filename, $filepath, $err, @cmd);

			vmsg "\nCreating graph: $subsys->{name} - $cap->{name}";

			$filename = lc "$subsys->{name}-$cap->{name}";
			$filename =~ s/\s/_/g;
			$filename =~ s/([^\w\-_])/sprintf "x%02x", ord $1/ge;
			$filepath = "$options{outdir}/$filename";

			for my $nodename (@{$cap->{data}}) {
				my $dsname = "ds$dsnum";
				push @nodes, { name => $nodename->{name}, ds => $dsname };
				$dsnum++;
			}

			@cmd = ("$filepath.rrd", "--start", $start_time - 1, "--step", $step_time,
				(map { "DS:$_->{ds}:GAUGE:@{[$step_time * 2]}:U:U" } @nodes),
				"RRA:AVERAGE:0:1:$numsamples",
				"RRA:MIN:0:1:$numsamples",
				"RRA:MAX:0:1:$numsamples");
			RRDs::create @cmd;
			die "RRDs::create @cmd: $err\n"
				if $err = RRDs::error;

			for $sample (@samples) {
				my $timestamp = UnixDate($sample->{end}, "%s");
				my @values;
				for $node (@nodes) {
					push @values,
						(defined $sample->{data}{$subsys->{name}}{$nodetype->{name}}{$cap->{name}}{$node->{name}} ?
						$sample->{data}{$subsys->{name}}{$nodetype->{name}}{$cap->{name}}{$node->{name}} : 'U');
				}
				@cmd = ("$filepath.rrd", "$timestamp:" . join(':', @values));
				RRDs::update @cmd;
				die "RRDs::update @cmd: $err\n"
					if $err = RRDs::error;
			}

			my $colornum = 0;
			my $maxnamelen = 0;
			for (@nodes) {
				$maxnamelen = length $_->{name}
					if $maxnamelen < length $_->{name};
			}
			@cmd = ("$filepath.png",
				"--title", "$subsys->{name} - $cap->{name}",
				"--start", $start_time, "--end", $end_time,
				"--lower-limit", "0",
				"--alt-autoscale-max",
				"--slope-mode",
				"--imgformat", "PNG",
				"--width", $options{graph_width},
				"--height", $options{graph_height},
				(map { (
					"DEF:$_->{ds}=$filepath.rrd:$_->{ds}:AVERAGE",
					"LINE1:$_->{ds}#@{[@colors[$colornum++ % @colors]]}"
						. ":$_->{name}"
						. "@{[' ' x ($maxnamelen - length $_->{name})]}\\:",
					"CDEF:cdef_$_->{ds}=$_->{ds}",
					"GPRINT:cdef_$_->{ds}:AVERAGE:Average\\:%5.0lf%s",
					"GPRINT:cdef_$_->{ds}:MIN:Min\\:%5.0lf%s",
					"GPRINT:cdef_$_->{ds}:MAX:Max\\:%5.0lf%s\\n",
				) } @nodes),
				"COMMENT:$graph_comment");
			my ($rrd_averages, $rrd_xsize, $rrd_ysize) = RRDs::graph @cmd;
			die "RRDs::graph @cmd: $err\n"
				if $err = RRDs::error;

			my $html_name = "param-$subsys->{name}-$cap->{name}";
			$html_name =~ s/\s/_/g;
			$html_name =~ s/([^\w_\-])/sprintf "x%02x", ord $1/ge;
			$html_index{$subsys->{name}} .=
				"<li><a href=\"#$html_name\">$cap->{name}</a></li>\n";
			$html_images .= "<a name=\"$html_name\"></a>"
				. "<p>$subsys->{name} - $cap->{name} "
				. "(<a href=\"#top\">Top</a>, "
				. "<a href=\"#$html_subsys_name\">$subsys->{name}</a>):<br>"
				. "<img src=\"$filename.png\" alt=\"$subsys->{name} "
				. "- $cap->{name}\" "
				. "width=\"$rrd_xsize\" height=\"$rrd_ysize\"></p>\n";
		}
	}
}

vmsg "\nCreating $options{index_html}";

open INDEX, ">$options{outdir}/$options{index_html}"
	or die "can't open $options{outdir}/$options{index_html}: $!";

print INDEX <<_EOT_;
<html>
<body bgcolor=white>
<a name="top"></a>
<table border=1>
<tr>
 <th>Samples</th>
 <td>$numsamples</td>
</tr>
<tr>
 <th>Step</th>
 <td>$step_time sec.</td>
</tr>
<tr>
 <th>Start</th>
 <td>@{[UnixDate($samples[0]->{start}, "%Y-%m-%d %H:%M:%S")]}</td>
</tr>
<tr>
 <th>End</th>
 <td>@{[UnixDate($samples[-1]->{end}, "%Y-%m-%d %H:%M:%S")]}</td>
</tr>
</table>
_EOT_

print INDEX "\n\n<ul>\n";
for (@{$struct->{data}}) {
	my $html_subsys_name = "subsys-$_->{name}";
	$html_subsys_name =~ s/\s/_/g;
	$html_subsys_name =~ s/([^\w_\-])/sprintf "x%02x", ord $1/ge;
	print INDEX "<li><a href=\"#$html_subsys_name\">$_->{name}</a></li>\n";
}
print INDEX "\n</ul>\n\n<ul>\n";

for (@{$struct->{data}}) {
	my $html_subsys_name = "subsys-$_->{name}";
	$html_subsys_name =~ s/\s/_/g;
	$html_subsys_name =~ s/([^\w_\-])/sprintf "x%02x", ord $1/ge;

	print INDEX <<_EOT_;
<a name=\"$html_subsys_name\"></a><li>$_->{name}<ul>
$html_index{$_->{name}}
</ul></li>
_EOT_
}

print INDEX <<_EOT_;
</ul>
$html_images
</body>
</html>
_EOT_

close INDEX;

vmsg "\n";
